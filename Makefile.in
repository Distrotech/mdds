prefix=@prefix@
datarootdir=@datarootdir@
PACKAGE_TARNAME=@PACKAGE_TARNAME@

OBJDIR=@OBJDIR@
SRCDIR=@SRCDIR@
INCDIR=@INCDIR@
MISCDIR=@MISCDIR@
QUICKCHECKDIR=@QUICKCHECKDIR@

CPPFLAGS=@CPPFLAGS@ -I$(INCDIR)
LDFLAGS=

EXECS= \
	flat_segment_tree_test \
	segment_tree_test \
	point_quad_tree_test \
	mixed_type_matrix_test \
	multi_type_matrix_test \
	rectangle_set_test \
	multi_type_vector_test_default \
	multi_type_vector_test_custom

HEADERS= \
	@top_srcdir@/$(INCDIR)/mdds/compat/unique_ptr.hpp \
	@top_srcdir@/$(INCDIR)/mdds/flat_segment_tree_def.inl \
	@top_srcdir@/$(INCDIR)/mdds/flat_segment_tree.hpp \
	@top_srcdir@/$(INCDIR)/mdds/flat_segment_tree_itr.hpp \
	@top_srcdir@/$(INCDIR)/mdds/global.hpp \
	@top_srcdir@/$(INCDIR)/mdds/hash_container/map.hpp \
	@top_srcdir@/$(INCDIR)/mdds/mixed_type_matrix_def.inl \
	@top_srcdir@/$(INCDIR)/mdds/mixed_type_matrix_element.hpp \
	@top_srcdir@/$(INCDIR)/mdds/mixed_type_matrix_flag_storage.hpp \
	@top_srcdir@/$(INCDIR)/mdds/mixed_type_matrix.hpp \
	@top_srcdir@/$(INCDIR)/mdds/mixed_type_matrix_storage_filled_linear.inl \
	@top_srcdir@/$(INCDIR)/mdds/mixed_type_matrix_storage.hpp \
	@top_srcdir@/$(INCDIR)/mdds/mixed_type_matrix_storage_sparse.inl \
	@top_srcdir@/$(INCDIR)/mdds/multi_type_matrix.hpp \
	@top_srcdir@/$(INCDIR)/mdds/multi_type_matrix_def.inl \
	@top_srcdir@/$(INCDIR)/mdds/node.hpp \
	@top_srcdir@/$(INCDIR)/mdds/point_quad_tree.hpp \
	@top_srcdir@/$(INCDIR)/mdds/quad_node.hpp \
	@top_srcdir@/$(INCDIR)/mdds/rectangle_set_def.inl \
	@top_srcdir@/$(INCDIR)/mdds/rectangle_set.hpp \
	@top_srcdir@/$(INCDIR)/mdds/segment_tree.hpp

DEPENDS= \
	$(HEADERS)

TESTS = \
	test.fst \
	test.recset \
	test.pqt \
	test.st \
	test.mtm \
	test.mtv \
	test.mtmatrix

TESTS_MEM = \
	test.pqt.mem \
	test.recset.mem \
	test.fst.mem \
	test.st.mem \
	test.mtm.mem \
	test.mtmatrix \

# You may add $(TESTS_MEM) if valgrind is available on your platform
ALL_TESTS = $(TESTS)

nothing:
	@echo There is nothing to build since this is a header-only library.

all: $(EXECS)

pre:
	mkdir -p $(OBJDIR)

$(OBJDIR)/flat_segment_tree_test.o: @top_srcdir@/$(SRCDIR)/flat_segment_tree_test.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/flat_segment_tree_test.cpp

$(OBJDIR)/segment_tree_test.o: @top_srcdir@/$(SRCDIR)/segment_tree_test.cpp  $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/segment_tree_test.cpp

$(OBJDIR)/rectangle_set_test.o: @top_srcdir@/$(SRCDIR)/rectangle_set_test.cpp  $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/rectangle_set_test.cpp

$(OBJDIR)/point_quad_tree_test.o: @top_srcdir@/$(SRCDIR)/point_quad_tree_test.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/point_quad_tree_test.cpp

$(OBJDIR)/mixed_type_matrix_test.o: @top_srcdir@/$(SRCDIR)/mixed_type_matrix_test.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/mixed_type_matrix_test.cpp

$(OBJDIR)/multi_type_vector_test_default.o: @top_srcdir@/$(SRCDIR)/multi_type_vector_test_default.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/multi_type_vector_test_default.cpp

$(OBJDIR)/multi_type_vector_test_custom.o: @top_srcdir@/$(SRCDIR)/multi_type_vector_test_custom.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/multi_type_vector_test_custom.cpp

$(OBJDIR)/multi_type_matrix_test.o: @top_srcdir@/$(SRCDIR)/multi_type_matrix_test.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/multi_type_matrix_test.cpp

flat_segment_tree_test: pre $(OBJDIR)/flat_segment_tree_test.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/flat_segment_tree_test.o -o $@

segment_tree_test: pre $(OBJDIR)/segment_tree_test.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/segment_tree_test.o -o $@

rectangle_set_test: pre $(OBJDIR)/rectangle_set_test.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/rectangle_set_test.o -o $@

point_quad_tree_test: pre $(OBJDIR)/point_quad_tree_test.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/point_quad_tree_test.o -o $@

mixed_type_matrix_test: pre $(OBJDIR)/mixed_type_matrix_test.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/mixed_type_matrix_test.o -o $@

multi_type_vector_test_default: pre $(OBJDIR)/multi_type_vector_test_default.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/multi_type_vector_test_default.o -o $@

multi_type_vector_test_custom: pre $(OBJDIR)/multi_type_vector_test_custom.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/multi_type_vector_test_custom.o -o $@

multi_type_matrix_test: pre $(OBJDIR)/multi_type_matrix_test.o
	$(CXX) $(LDFLAGS) $(OBJDIR)/multi_type_matrix_test.o -o $@

multi_type_vector_test: multi_type_vector_test_default multi_type_vector_test_custom

stlperf_test: pre @top_srcdir@/$(SRCDIR)/stlperf_test.cpp
	$(CXX) $(LDFLAGS) $(CPPFLAGS) @top_srcdir@/$(SRCDIR)/stlperf_test.cpp -o $@

$(OBJDIR)/template_test.o: @top_srcdir@/$(SRCDIR)/template_test.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ @top_srcdir@/$(SRCDIR)/template_test.cpp

test.fst: flat_segment_tree_test
	./flat_segment_tree_test func

test.fst.perf: flat_segment_tree_test
	./flat_segment_tree_test perf

test.fst.mem: flat_segment_tree_test
	valgrind --tool=memcheck --leak-check=full ./flat_segment_tree_test func

test.pqt: point_quad_tree_test
	./point_quad_tree_test

test.pqt.mem: point_quad_tree_test
	valgrind --tool=memcheck --leak-check=full ./point_quad_tree_test

test.recset: rectangle_set_test
	./rectangle_set_test func

test.recset.perf: rectangle_set_test
	./rectangle_set_test perf

test.recset.mem: rectangle_set_test
	valgrind --tool=memcheck --leak-check=full ./rectangle_set_test func

test.st: segment_tree_test
	./segment_tree_test func

test.st.perf: segment_tree_test
	./segment_tree_test perf

test.st.mem: segment_tree_test
	valgrind --tool=memcheck --leak-check=full ./segment_tree_test func

test.mtm: mixed_type_matrix_test
	./mixed_type_matrix_test func

test.mtm.perf: mixed_type_matrix_test
	./mixed_type_matrix_test perf

test.mtm.mem: mixed_type_matrix_test
	valgrind --tool=memcheck --leak-check=full ./mixed_type_matrix_test func

test.mtv: multi_type_vector_test_default multi_type_vector_test_custom
	./multi_type_vector_test_default func
	./multi_type_vector_test_custom func

test.mtv.perf: multi_type_vector_test_default multi_type_vector_test_custom
	./multi_type_vector_test_default perf
	./multi_type_vector_test_custom perf

test.mtv.mem: multi_type_vector_test_default multi_type_vector_test_custom
	valgrind --tool=memcheck --leak-check=full ./multi_type_vector_test_default func
	valgrind --tool=memcheck --leak-check=full ./multi_type_vector_test_custom func

test.mtmatrix: multi_type_matrix_test
	./multi_type_matrix_test func

test.mtmatrix.perf: multi_type_matrix_test
	./multi_type_matrix_test perf

test.mtmatrix.mem: multi_type_matrix_test
	valgrind --tool=memcheck --leak-check=full ./multi_type_matrix_test func

test.stl: stlperf_test
	./stlperf_test

$(QUICKCHECKDIR)/flat_segment_tree.o: $(QUICKCHECKDIR)/flat_segment_tree.cpp $(DEPENDS)
	$(CXX) $(CPPFLAGS) -c -o $@ $<

$(QUICKCHECKDIR)/flat_segment_tree: $(QUICKCHECKDIR)/flat_segment_tree.o pre
	$(CXX) $(LDFLAGS) $< -o $@

install: $(HEADERS)
	install -d $(DESTDIR)@includedir@/mdds
	install -d $(DESTDIR)@includedir@/mdds/hash_container
	install -d $(DESTDIR)@includedir@/mdds/compat
	install -d $(DESTDIR)@docdir@
	install -d $(DESTDIR)@datarootdir@
	install -d $(DESTDIR)@datarootdir@/pkgconfig
	install -m 644 -t $(DESTDIR)@includedir@/mdds @top_srcdir@/$(INCDIR)/mdds/*.hpp
	install -m 644 -t $(DESTDIR)@includedir@/mdds @top_srcdir@/$(INCDIR)/mdds/*.inl
	install -m 644 -t $(DESTDIR)@includedir@/mdds/compat @top_srcdir@/$(INCDIR)/mdds/compat/*.hpp
	install -m 644 -t $(DESTDIR)@includedir@/mdds/hash_container @top_srcdir@/$(INCDIR)/mdds/hash_container/*.hpp
	install -m 644 -t $(DESTDIR)@datarootdir@/pkgconfig $(MISCDIR)/mdds.pc
	install -m 644 -t $(DESTDIR)@docdir@ @top_srcdir@/AUTHORS @top_srcdir@/COPYING @top_srcdir@/NEWS @top_srcdir@/README @top_srcdir@/VERSION

check: $(ALL_TESTS)

quickcheck: $(QUICKCHECKDIR)/flat_segment_tree
	$(QUICKCHECKDIR)/flat_segment_tree

clean:
	rm -rf $(OBJDIR) 2>/dev/null || /bin/true
	rm $(EXECS) 2>/dev/null || /bin/true
	rm $(QUICKCHECKDIR)/flat_segment_tree $(QUICKCHECKDIR)/*.o 2>/dev/null || true
