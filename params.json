{"name":"Mdds","tagline":"Mirror of https://code.google.com/p/multidimalgorithm/","body":"Multi-Dimensional Data Structure (mdds)\r\n\r\nA collection of multi-dimensional data structure and indexing \r\nalgorithm.  \r\n\r\n\r\nOverview\r\n========\r\n\r\nThis library implements the following data structure:\r\n\r\n    * flat segment tree \r\n    * segment tree\r\n    * rectangle set\r\n    * point quad tree\r\n    * mixed type matrix\r\n\r\nSegment Tree\r\n\r\nSegment tree is a balanced-binary-tree based data structure efficient \r\nfor detecting all intervals (or segments) that contain a given point.  \r\nThe segments may overlap with each other.  The end points of stored \r\nsegments are not inclusive, that is, when an interval spans from 2 to \r\n6, an arbitrary point x within that interval can take a value of 2 <= \r\nx < 6.  \r\n\r\nFlat Segment Tree\r\n\r\nFlat segment tree is a variant of segment tree that is designed to \r\nstore a collection of non-overlapping segments.  This structure is \r\nefficient when you need to store values associated with 1 dimensional \r\nsegments that never overlap with each other.  Like segment tree, \r\nstored segments' end points are non-inclusive.  \r\n\r\nRectangle Set\r\n\r\nRectangle set stores 2-dimensional rectangles and provides an \r\nefficient way to query all rectangles that contain a given point in \r\n2-dimensional space.  It internally uses nested segment tree.  Each \r\nrectangle is defined by two 2-dimensional points: the top-left and \r\nbottom-right points, and the bottom-right point is non-inclusive.  For \r\ninstance, if a rectangle ranges from (x=2, y=2) to (x=10, y=20), then \r\na 2-dimension point A (x,y) is said to be inside that rectangle only \r\nwhen 2 <= x < 10 and 2 <= y < 20.\r\n\r\nPoint Quad Tree\r\n\r\nPoint quad tree stores 2-dimensional points and provides an efficient \r\nway to query all points within specified rectangular region.  \r\n\r\nMixed Type Matrix\r\n\r\nMixed type matrix (MTM) allows storage of elements of various types: \r\nboolean, numeric, string, and empty types.  It also allows storage of \r\nadditional value associated with each element.  MTM allows two storage \r\nback-ends: filled storage and sparse storage.  Filled storage \r\nallocates memory for all elements at all times, whereas sparse storage \r\nallocates memory only for elements having non-default values.  \r\n\r\n\r\nHow-To\r\n======\r\n\r\nPlease take a look at simple example files under the 'example' \r\ndirectory on how to use these data structures.\r\n\r\n\r\nAPI Incompatibility Note\r\n========================\r\n\r\n0.8.1 to 0.9.0\r\n\r\nmulti_type_vector\r\n\r\n* The number of template parameters in custom_block_func1,\r\n  custom_block_func2 and custom_block_func3 have been reduced by half,\r\n  by deducing the numerical block type ID from the block type\r\n  definition directly.  If you use the older variant, simply remove\r\n  the template arguments that are numerical block IDs.\r\n\r\n0.7.1 to 0.8.0\r\n\r\nflat_segment_tree\r\n\r\n* The search_tree() method in 0.8.0 returns std::pair<const_iterator,\r\n  bool> instead of just returning bool as of 0.7.1.  If you use this\r\n  method and relies on the return value of the old version, use the\r\n  second parameter of the new return value which is equivalent of the\r\n  previous return value.\r\n\r\n0.4.0 to 0.5.0\r\n\r\nflat_segment_tree\r\n\r\n* The search() method now returns ::std::pair<const_iterator, bool>.  \r\n  This method previously returned only bool.  Use the second parameter of \r\n  the new return value which is equivalent of the previous return value.\r\n\r\n\r\nLicense\r\n=======\r\n\r\nmdds is free software. You may copy, distribute, and modify it under\r\nthe terms of the License contained in the file COPYING distributed\r\nwith this package. This license is the same as the MIT/X Consortium\r\nlicense.\r\n\r\n\r\nMiscellaneous\r\n=============\r\n\r\nVersion detection\r\n\r\nWhen installing this library, file named VERSION that contains nothing \r\nbut the version number string gets installed in the document directory \r\n(docdir).  This may be used to detect the version number of this \r\nlibrary via script.  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}